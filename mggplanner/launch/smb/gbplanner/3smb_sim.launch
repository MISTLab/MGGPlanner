<launch>
  <!-- All settings -->
  <arg name="robot_name" default="smb"/>
  <arg name="robot_id1" default="R1"/>
  <arg name="robot_id2" default="R2"/>
  <arg name="robot_id3" default="R3"/>
  <arg name="robot_id1_int" default="1"/>
  <arg name="robot_id2_int" default="2"/>
  <arg name="robot_id3_int" default="3"/>
  <arg name="gazebo_gui_en" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="rviz_en" default="true" />
  <arg name="launch_prefix" default=""/> <!-- gdb -ex run //args -->
  <param name="use_sim_time" value="$(arg use_sim_time)"/>

  <!-- Config files -->
  <arg name="mggplanner_config_file" default="$(find mggplanner)/config/$(arg robot_name)/mggplanner_config_sim.yaml"/>
  <arg name="pci_file" default="$(find mggplanner)/config/$(arg robot_name)/planner_control_interface_sim_config.yaml"/>
  <arg name="voxblox_config_file" default="$(find mggplanner)/config/$(arg robot_name)/voxblox_sim_config_sim.yaml"/>
  <arg name="map_config_file" default="$(arg voxblox_config_file)"/>
  <!-- <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/niosh_osrf.world"/> -->
  <!-- <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/darpa_cave_01.world"/> -->
  <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/pittsburgh_mine.world"/>

 
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find planner_gazebo_sim)/models:$(find subt_cave_sim)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_file)"/>
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="gui" value="$(arg gazebo_gui_en)"/>
		<arg name="headless" value="false"/>
		<arg name="debug" value="false"/>
    <arg name="verbose" value="false"/>
	</include>
  
  <node pkg="tf" type="static_transform_publisher" name="tfw_w1" args="0 0 0 0 0 0 world $(arg robot_id1)/world 100" />
  <node pkg="tf" type="static_transform_publisher" name="tfw_w2" args="0 0 0 0 0 0 world $(arg robot_id2)/world 100" />
  <node pkg="tf" type="static_transform_publisher" name="tfw_w3" args="0 0 0 0 0 0 world $(arg robot_id3)/world 100" />

 <group ns="$(arg robot_id1)">

  <!-- Static TF -->
  <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 $(arg robot_id1)/world $(arg robot_id1)/navigation 100" />

  <include file="$(find smb_gazebo)/launch/spawn_smb.launch">
    <arg name="joystick" value="false"/>
    <arg name="x" value="0.0" />
    <arg name="y" value="0.0" />
    <arg name="z" value="0.5" />
    <arg name="robot_namespace" value="$(arg robot_id1)" />
    <arg name="robot_id" value="$(arg robot_id1)" />
    <arg name="tf_namespace" value="$(arg robot_id1)" />
  </include>

  <!-- <include file="$(find smb_path_tracker)/launch/pure_pursuit_tracker.launch">
    <arg name="robot_frame" value="$(arg robot_id1)/base_link"/>
    <arg name="world_frame" value="$(arg robot_id1)/world"/>
  </include> -->

  <include file="$(find local_planner)/launch/local_planner_mggplanner.launch" >
    <arg name="cameraOffsetZ" value="0"/>
    <arg name="goalX" value="0"/>
    <arg name="goalY" value="0"/>
  </include>
 

	<node name="smb_path_tracker_node" pkg="smb_path_tracker" type="smb_path_tracker_ros_node" output="screen">
		<!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<remap from="odometry" to="ground_truth/state" />
    <!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<param name="critical_angle" value="0.52"/>
		<param name="max_ang_vel" value="0.9"/>
		<param name="desired_vel" value="0.5"/>
		<param name="look_ahead_error_margin" value="1.2"/>
		<param name="look_ahead_distance" value="1.2"/>
		<param name="dt" value="0.1"/>
		<param name="goal_reaching_threshold" value="1.0"/>
		<param name="robot_frame" value="$(arg robot_id1)/base_link"/>
		<param name="fixed_frame" value="$(arg robot_id1)/world"/>
	</node>

  <node pkg="topic_tools" type="relay" name="nei_graph_r2tor1" args="/$(arg robot_id2)/neighbour_graph_out neighbour_graph_in" />
  <node pkg="topic_tools" type="relay" name="nei_graph_r3tor1" args="/$(arg robot_id3)/neighbour_graph_out neighbour_graph_in" />

  <node pkg="topic_tools" type="relay" name="vlp_relay" args="velodyne_points input_pointcloud" />
  <node pkg="topic_tools" type="relay" name="front_lidar_relay" args="lidar_front_points input_pointcloud" />

  <arg name="odometry_topic" default="ground_truth/state"/>
  <!-- <node name="pose_throttler" type="throttle" pkg="topic_tools" args="messages $(arg robot_name)/ground_truth/pose_with_covariance 10 msf_core/pose" /> -->
  <!-- Graph based planning -->
  <node pkg="mggplanner" type="mggplanner_node" name="mggplanner_node" output="screen" launch-prefix="$(arg launch_prefix)">
    <remap from="odometry" to="$(arg odometry_topic)" />
    <remap from="pointcloud" to="input_pointcloud" />
    <rosparam command="load" file="$(arg mggplanner_config_file)" />
    <rosparam command="load" file="$(arg map_config_file)" />
    <param name="PlanningParams/global_frame_id" value="$(arg robot_id1)/world"/>
    <param name="world_frame" value="$(arg robot_id1)/world"/>
    <param name="PlanningParams/robot_id" value="$(arg robot_id1_int)"/>
    <param name="PlanningParams/sim" value="1"/>
  </node>

  <!-- Planner and Control Interface -->
  <node pkg="pci_general" type="pci_general_ros_node" name="pci_general_ros_node" output="screen">
    <remap from="command/trajectory" to="$(arg robot_name)/command/trajectory" />
    <remap from="planner_server" to="mggplanner" />
    <remap from="planner_homing_server" to="mggplanner/homing" />
    <remap from="odometry" to="$(arg odometry_topic)"/>
    <rosparam command="load" file="$(arg pci_file)" />
  </node>

  <node pkg="rviz" type="rviz" name="mggplanner_ui" output="screen" args="-d $(find mggplanner)/config/rviz/smbR1.rviz"/>
  </group>


 <group ns="$(arg robot_id2)">

  <!-- Static TF -->
  <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 $(arg robot_id2)/world $(arg robot_id2)/navigation 100" />

  <include file="$(find smb_gazebo)/launch/spawn_smb.launch">
    <arg name="joystick" value="false"/>
    <!-- <arg name="x" value="-7.286" /> -->
    <!-- <arg name="y" value="12.731" />    -->
    <arg name="x" value="20.223" />
    <arg name="y" value="13.0" />
    <arg name="z" value="0.5" />
    <arg name="robot_namespace" value="$(arg robot_id2)" />
    <arg name="robot_id" value="$(arg robot_id2)" />
    <arg name="tf_namespace" value="$(arg robot_id2)" />
  </include>

  <!-- <include file="$(find smb_path_tracker)/launch/pure_pursuit_tracker.launch">
    <arg name="robot_frame" value="$(arg robot_id2)/base_link"/>
    <arg name="world_frame" value="$(arg robot_id2)/world"/>
  </include> -->

  <include file="$(find local_planner)/launch/local_planner_mggplanner.launch" >
    <arg name="cameraOffsetZ" value="0"/>
    <arg name="goalX" value="0"/>
    <arg name="goalY" value="0"/>
  </include>
 

	<node name="smb_path_tracker_node" pkg="smb_path_tracker" type="smb_path_tracker_ros_node" output="screen">
		<!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<remap from="odometry" to="ground_truth/state" />
    <!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<param name="critical_angle" value="0.52"/>
		<param name="max_ang_vel" value="0.9"/>
		<param name="desired_vel" value="0.5"/>
		<param name="look_ahead_error_margin" value="1.2"/>
		<param name="look_ahead_distance" value="1.2"/>
		<param name="dt" value="0.1"/>
		<param name="goal_reaching_threshold" value="1.0"/>
		<param name="robot_frame" value="$(arg robot_id1)/base_link"/>
		<param name="fixed_frame" value="$(arg robot_id1)/world"/>
	</node>

  <node pkg="topic_tools" type="relay" name="nei_graph_r1tor2" args="/$(arg robot_id1)/neighbour_graph_out neighbour_graph_in" />
  <node pkg="topic_tools" type="relay" name="nei_graph_r3tor2" args="/$(arg robot_id3)/neighbour_graph_out neighbour_graph_in" />

  <node pkg="topic_tools" type="relay" name="vlp_relay" args="velodyne_points input_pointcloud" />
  <node pkg="topic_tools" type="relay" name="front_lidar_relay" args="lidar_front_points input_pointcloud" />

  <arg name="odometry_topic" default="ground_truth/state"/>
  <!-- <node name="pose_throttler" type="throttle" pkg="topic_tools" args="messages $(arg robot_name)/ground_truth/pose_with_covariance 10 msf_core/pose" /> -->
  <!-- Graph based planning -->
  <node pkg="mggplanner" type="mggplanner_node" name="mggplanner_node" output="screen" launch-prefix="$(arg launch_prefix)">
    <remap from="odometry" to="$(arg odometry_topic)" />
    <remap from="pointcloud" to="input_pointcloud" />
    <rosparam command="load" file="$(arg mggplanner_config_file)" />
    <rosparam command="load" file="$(arg map_config_file)" />
    <param name="PlanningParams/global_frame_id" value="$(arg robot_id2)/world"/>
    <param name="world_frame" value="$(arg robot_id2)/world"/>
    <param name="PlanningParams/robot_id" value="$(arg robot_id2_int)"/>
    <param name="PlanningParams/sim" value="1"/>
  </node>

  <!-- Planner and Control Interface -->
  <node pkg="pci_general" type="pci_general_ros_node" name="pci_general_ros_node" output="screen">
    <remap from="command/trajectory" to="$(arg robot_name)/command/trajectory" />
    <remap from="planner_server" to="mggplanner" />
    <remap from="planner_homing_server" to="mggplanner/homing" />
    <remap from="odometry" to="$(arg odometry_topic)"/>
    <rosparam command="load" file="$(arg pci_file)" />
  </node>

  <node pkg="rviz" type="rviz" name="mggplanner_ui" output="screen" args="-d $(find mggplanner)/config/rviz/smbR2.rviz"/>
  </group>
<!-- R2 init pose -7.286, 12.731 -->

<group ns="$(arg robot_id3)">

  <!-- Static TF -->
  <node pkg="tf" type="static_transform_publisher" name="tf_r353" args="0 0 0 0 0 0 $(arg robot_id3)/world $(arg robot_id3)/navigation 100" />

  <include file="$(find smb_gazebo)/launch/spawn_smb.launch">
    <arg name="joystick" value="false"/>
    <arg name="x" value="-16.3" />
    <arg name="y" value="15.0" />
    <arg name="z" value="0.5" />
    <arg name="robot_namespace" value="$(arg robot_id3)" />
    <arg name="robot_id" value="$(arg robot_id3)" />
    <arg name="tf_namespace" value="$(arg robot_id3)" />
  </include>

  <!-- <include file="$(find smb_path_tracker)/launch/pure_pursuit_tracker.launch">
    <arg name="robot_frame" value="$(arg robot_id3)/base_link"/>
    <arg name="world_frame" value="$(arg robot_id3)/world"/>
  </include> -->

  <include file="$(find local_planner)/launch/local_planner_mggplanner.launch" >
    <arg name="cameraOffsetZ" value="0"/>
    <arg name="goalX" value="0"/>
    <arg name="goalY" value="0"/>
  </include>
 

	<node name="smb_path_tracker_node" pkg="smb_path_tracker" type="smb_path_tracker_ros_node" output="screen">
		<!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<remap from="odometry" to="ground_truth/state" />
    <!-- <remap from="cmd_vel" to="smb_velocity_controller/cmd_vel" /> -->
		<param name="critical_angle" value="0.52"/>
		<param name="max_ang_vel" value="0.9"/>
		<param name="desired_vel" value="0.5"/>
		<param name="look_ahead_error_margin" value="1.2"/>
		<param name="look_ahead_distance" value="1.2"/>
		<param name="dt" value="0.1"/>
		<param name="goal_reaching_threshold" value="1.0"/>
		<param name="robot_frame" value="$(arg robot_id1)/base_link"/>
		<param name="fixed_frame" value="$(arg robot_id1)/world"/>
	</node>

  <node pkg="topic_tools" type="relay" name="nei_graph_r2tor3" args="/$(arg robot_id2)/neighbour_graph_out neighbour_graph_in" />
  <node pkg="topic_tools" type="relay" name="nei_graph_r1tor3" args="/$(arg robot_id1)/neighbour_graph_out neighbour_graph_in" />

  <node pkg="topic_tools" type="relay" name="vlp_relay" args="velodyne_points input_pointcloud" />
  <node pkg="topic_tools" type="relay" name="front_lidar_relay" args="lidar_front_points input_pointcloud" />

  <arg name="odometry_topic" default="ground_truth/state"/>
  <!-- <node name="pose_throttler" type="throttle" pkg="topic_tools" args="messages $(arg robot_name)/ground_truth/pose_with_covariance 10 msf_core/pose" /> -->
  <!-- Graph based planning -->
  <node pkg="mggplanner" type="mggplanner_node" name="mggplanner_node" output="screen" launch-prefix="$(arg launch_prefix)">
    <remap from="odometry" to="$(arg odometry_topic)" />
    <remap from="pointcloud" to="input_pointcloud" />
    <rosparam command="load" file="$(arg mggplanner_config_file)" />
    <rosparam command="load" file="$(arg map_config_file)" />
    <param name="PlanningParams/global_frame_id" value="$(arg robot_id3)/world"/>
    <param name="world_frame" value="$(arg robot_id3)/world"/>
    <param name="PlanningParams/robot_id" value="$(arg robot_id3_int)"/>
    <param name="PlanningParams/sim" value="1"/>
  </node>

  <!-- Planner and Control Interface -->
  <node pkg="pci_general" type="pci_general_ros_node" name="pci_general_ros_node" output="screen">
    <remap from="command/trajectory" to="$(arg robot_name)/command/trajectory" />
    <remap from="planner_server" to="mggplanner" />
    <remap from="planner_homing_server" to="mggplanner/homing" />
    <remap from="odometry" to="$(arg odometry_topic)"/>
    <rosparam command="load" file="$(arg pci_file)" />
  </node>

  <node pkg="rviz" type="rviz" name="mggplanner_ui" output="screen" args="-d $(find mggplanner)/config/rviz/smbR3.rviz"/>
  </group>


 
</launch>